name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run all tests
      run: dotnet test --no-build --verbosity normal --configuration Release --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Generate test report
      run: |
        echo "## Test Results Summary" >> test-report.md
        echo "" >> test-report.md
        echo "### Test Statistics" >> test-report.md
        echo "- **Total Tests**: $(find . -name "TestResults" -type d -exec find {} -name "*.trx" \; | wc -l)" >> test-report.md
        echo "- **Test Duration**: $(date)" >> test-report.md
        echo "" >> test-report.md
        echo "### Coverage Report" >> test-report.md
        echo "Code coverage reports generated in ./coverage/" >> test-report.md
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          **/TestResults/
          coverage/
          test-report.md
        retention-days: 30

  # Security Analysis Job
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'PokemonTypeClash'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-${{ github.run_number }}
        path: reports/
        retention-days: 90

  # Performance Testing Job
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build application
      run: dotnet build --configuration Release
      
    - name: Run performance tests
      run: |
        echo "## Performance Test Results" > performance-report.md
        echo "" >> performance-report.md
        echo "### Startup Time Test" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        time dotnet run --project src/PokemonTypeClash.Console --configuration Release --no-build -- --help 2>&1 >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        echo "" >> performance-report.md
        echo "### Memory Usage Test" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        dotnet run --project src/PokemonTypeClash.Console --configuration Release --no-build -- --analyze pikachu 2>&1 >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        
    - name: Upload performance metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-metrics-${{ github.run_number }}
        path: |
          **/performance-results/
          performance-report.md
        retention-days: 30

  # Build Executables Job
  build-executables:
    name: Build Cross-Platform Executables
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        platform: [win-x64, linux-x64, osx-x64, osx-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build single-file executable
      run: |
        dotnet publish src/PokemonTypeClash.Console \
          -c Release \
          -o ./publish/${{ matrix.platform }} \
          --self-contained \
          -r ${{ matrix.platform }} \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          --verbosity minimal
        
    - name: Set executable permissions (Linux/macOS)
      run: |
        if [ "${{ matrix.platform }}" != "win-x64" ]; then
          chmod +x ./publish/${{ matrix.platform }}/PokemonTypeClash
          echo "‚úÖ Set executable permissions for ${{ matrix.platform }}"
        else
          echo "‚è≠Ô∏è Skipping permissions for Windows"
        fi
        
    - name: Create archive
      run: |
        cd publish
        
        # Create archive based on platform
        if [ "${{ matrix.platform }}" = "win-x64" ]; then
          zip -r PokemonTypeClash-${{ matrix.platform }}.zip ${{ matrix.platform }}/
        else
          tar -czf PokemonTypeClash-${{ matrix.platform }}.tar.gz ${{ matrix.platform }}/
        fi
        
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: PokemonTypeClash-${{ matrix.platform }}-${{ github.run_number }}
        path: publish/PokemonTypeClash-${{ matrix.platform }}.*
        retention-days: 30

  # Release Job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-executables]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all executable artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./executables
        
    - name: List downloaded files
      run: |
        echo "## Downloaded Artifacts" > release-assets.md
        echo "" >> release-assets.md
        echo "### Single-File Executables" >> release-assets.md
        find ./executables -type f -name "*.zip" -o -name "*.tar.gz" | sort >> release-assets.md
        echo "" >> release-assets.md
        echo "### File Sizes" >> release-assets.md
        echo "\`\`\`" >> release-assets.md
        find ./executables -type f -name "*.zip" -o -name "*.tar.gz" | xargs ls -lh >> release-assets.md
        echo "\`\`\`" >> release-assets.md
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## üéÆ PokemonTypeClash v${{ github.run_number }}
          
          ### What's New
          - üöÄ **Single-file executables** - Clean, compact downloads (~50-80MB)
          - üçé **macOS ARM64 support** - Native Apple Silicon performance
          - üéØ **Cross-platform support** - Windows, macOS (Intel/ARM), and Linux
          - ‚ö° **Pokemon type effectiveness analysis** - Real-time data from Pok√©API
          - üé® **Authentic Pokemon styling** - Pikachu yellow and Pokemon Red/Blue colors
          - üõ°Ô∏è **Comprehensive testing** - 57 tests ensure quality
          - üîß **Fixed permissions** - Linux/macOS executables ready to run
          
          ### Downloads
          
          **Windows Users:**
          - Download `PokemonTypeClash-win-x64.zip`
          - Extract and run `PokemonTypeClash.exe`
          - No .NET installation required!
          
          **macOS Intel Users:**
          - Download `PokemonTypeClash-osx-x64.tar.gz`
          - Extract: `tar -xzf PokemonTypeClash-osx-x64.tar.gz`
          - Run: `./PokemonTypeClash`
          - No .NET installation required!
          
          **macOS Apple Silicon (M1/M2) Users:**
          - Download `PokemonTypeClash-osx-arm64.tar.gz`
          - Extract: `tar -xzf PokemonTypeClash-osx-arm64.tar.gz`
          - Run: `./PokemonTypeClash`
          - Native ARM64 performance!
          
          **Linux Users:**
          - Download `PokemonTypeClash-linux-x64.tar.gz`
          - Extract: `tar -xzf PokemonTypeClash-linux-x64.tar.gz`
          - Run: `./PokemonTypeClash`
          - No .NET installation required!
          
          ### Quick Start
          
          **For Developers (with .NET):**
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd PokemonTypeClash
          ./run.sh  # or run.bat on Windows
          ```
          
          **For End Users (no .NET needed):**
          - Download the appropriate executable above
          - Extract and run the executable
          - That's it! No installation required.
          
          ### Features
          - ‚öîÔ∏è **Offensive analysis** - What your Pokemon is strong against
          - üõ°Ô∏è **Defensive analysis** - What types to watch out for
          - üí™ **Resistance tracking** - What attacks you can shrug off
          - üö´ **Immunity detection** - What attacks have no effect
          - üìä **Damage calculations** - Exact effectiveness multipliers
          
          ### System Requirements
          - **Windows 10/11, macOS 10.15+, or Linux**
          - **4GB RAM** (minimum)
          - **Internet connection** (for Pokemon data)
          - **No .NET installation required!**
          
          ### Technical Details
          - Built with .NET 9.0
          - Self-contained executables include .NET runtime
          - Single-file builds for cleaner distribution
          - ARM64 support for Apple Silicon
          - Uses Pok√©API for real-time Pokemon data
          - Comprehensive error handling and retry logic
          - Cross-platform compatibility
          - Proper executable permissions for Linux/macOS
          
          ---
          
          **Ready to become a Pokemon master? Download and start analyzing! ‚ö°**
        draft: false
        prerelease: false
        files: |
          executables/**/PokemonTypeClash-win-x64.zip
          executables/**/PokemonTypeClash-osx-x64.tar.gz
          executables/**/PokemonTypeClash-osx-arm64.tar.gz
          executables/**/PokemonTypeClash-linux-x64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
