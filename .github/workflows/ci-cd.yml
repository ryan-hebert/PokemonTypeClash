name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'PokemonTypeClash.sln'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --verbosity normal --configuration Release --filter "Category!=Integration"
      
    - name: Run integration tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --verbosity normal --configuration Release --filter "Category=Integration"
      
    - name: Generate test coverage report
      run: |
        dotnet test ${{ env.SOLUTION_FILE }} --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/
          coverage/
        retention-days: 30

  # Code Quality Job
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install SonarCloud scanner
      uses: SonarSource/sonarcloud-github-action@master
      
    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"your-org_pokemontypeclash" /o:"your-org" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build ${{ env.SOLUTION_FILE }} --configuration Release
        dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration Release
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Security Analysis Job
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'PokemonTypeClash'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: reports/
        retention-days: 90

  # Performance Testing Job
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build application
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release
      
    - name: Run performance tests
      run: |
        # Run application startup time test
        time dotnet run --project src/PokemonTypeClash.Console --configuration Release --no-build -- --help
        
        # Run memory usage test
        dotnet run --project src/PokemonTypeClash.Console --configuration Release --no-build -- --analyze pikachu
        
    - name: Upload performance metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-metrics
        path: |
          **/performance-results/
        retention-days: 30

  # Release Job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build release artifacts
      run: |
        dotnet publish src/PokemonTypeClash.Console -c Release -o ./publish/win-x64 --self-contained -r win-x64
        dotnet publish src/PokemonTypeClash.Console -c Release -o ./publish/linux-x64 --self-contained -r linux-x64
        dotnet publish src/PokemonTypeClash.Console -c Release -o ./publish/osx-x64 --self-contained -r osx-x64
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## What's Changed
          
          ### Features
          - Automated CI/CD pipeline
          - Comprehensive testing and code quality analysis
          - Performance monitoring
          - Cross-platform support
          
          ### Technical Improvements
          - Updated to .NET 9.0
          - Enhanced error handling
          - Improved test coverage
          - Better documentation
          
          ## Downloads
          
          ### Windows
          - [PokemonTypeClash-win-x64.zip](https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/PokemonTypeClash-win-x64.zip)
          
          ### Linux
          - [PokemonTypeClash-linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/PokemonTypeClash-linux-x64.tar.gz)
          
          ### macOS
          - [PokemonTypeClash-osx-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/PokemonTypeClash-osx-x64.tar.gz)
          
          ## Installation
          
          ### Windows
          1. Download the zip file
          2. Extract to a folder
          3. Run `PokemonTypeClash.exe`
          
          ### Linux/macOS
          1. Download the tar.gz file
          2. Extract: `tar -xzf PokemonTypeClash-*.tar.gz`
          3. Run: `./PokemonTypeClash`
          
          ## Quick Start
          
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd PokemonTypeClash
          
          # Run the application
          ./run.sh
          ```
        draft: false
        prerelease: false
        files: |
          publish/win-x64/**/*
          publish/linux-x64/**/*
          publish/osx-x64/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
